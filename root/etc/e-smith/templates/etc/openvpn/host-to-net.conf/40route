{
    use esmith::NetworksDB;
    use esmith::ConfigDB;
    use esmith::util;
    use NethServer::Service;
    my $ndb = esmith::NetworksDB->open_ro();
    my $rdb = esmith::ConfigDB->open_ro('routes');

    my $green = $ndb->green();
    my $IPAddress = $green->prop('ipaddr');
    my @dns;
    my $s = new NethServer::Service('dnsmasq');
    if( $s->is_owned() && $s->is_enabled() ) {
        push(@dns, $IPAddress);
    } else {
        @dns = split(',', ($dns{NameServers} || ''), 2);
    }

    $OUT  = "";

    if($openvpn{ClientToClient} eq 'enabled')
    {
        $OUT .= "client-to-client\n";
    }

    $OUT .= "push \"dhcp-option DOMAIN $DomainName\"\n";
    foreach my $dns (@dns) {
        $OUT .= "push \"dhcp-option DNS $dns\"\n";
        $OUT .= "push \"dhcp-option WINS $dns\"\n";
        $OUT .= "push \"dhcp-option NBDD $dns\"\n";
    }
    $OUT .= "push \"dhcp-option NBT 2\"\n";

    my @routes = $rdb->get_all_by_prop( type => 'static');
    foreach my $network_entry (@routes)
    {
        my $network = $network_entry->key();
        my $netmask = $network_entry->prop('Mask');

        if(not $network eq $openvpn{Network})
        {
            $OUT .= "push \"route ".$network." ".$netmask."\"\n";
        }
    }
    
    $mode = $openvpn{'Mode'} || 'routed';
    if ($mode ne 'bridged') {
        my $greenNetwork = esmith::util::computeLocalNetworkSpec($green->prop('ipaddr'),$green->prop('netmask'));
        $greenNetwork =~ s/\// /g;
        $OUT .= "push \"route $greenNetwork\"\n";
   }

}
