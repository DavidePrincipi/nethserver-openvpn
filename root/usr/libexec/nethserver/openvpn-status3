#!/usr/bin/perl -w
use strict;
use Socket;
use IO::Handle;
use JSON;


sub help() {
    print "Usage: openvpn-status3 <socket> \n\n";
    print "   Example: openvpn-status3 /var/spool/openvpn/host-to-net\n\n";
    exit(1);
}

# flush after every write
$| = 1;

if (scalar(@ARGV) < 1) {
    help();
}
my $socket = $ARGV[0];
exit(1) unless (-e $socket);

socket(TSOCK, PF_UNIX, SOCK_STREAM,0);
connect(TSOCK, sockaddr_un($socket)) or exit(1);
my %results;
while (defined(my $msg = <TSOCK>)) {
    print TSOCK "status 3\n";
    TSOCK->flush;
    exit(1) if $msg =~ /ERROR/;
    last if $msg =~ /END/;
    if ($msg =~ /^CLIENT_LIST/) {
        # Line format
        # Header, Common Name Real Address    Virtual Address Virtual IPv6 Address    Bytes Received  Bytes Sent  Connected Since Connected Since (time_t)    Username    Client ID   Peer ID
        my ($header, $cn, $real_address, $virtual_ipv4, $virtual_ipv6, $bytes_received, $bytes_sent, $since, $username, $client_id, $peer_id) = split('\t', $msg);
        next if ($cn eq 'UNDEF');
        $results{$cn} =  { 
            real_address => $real_address, 
            virtual_address => $virtual_ipv4, 
            bytes_received => $bytes_received,
            bytes_sent => $bytes_sent,
            since => $since
        }
    }
}

my $json = JSON->new;
my $json_text   = $json->encode( \%results );
print $json_text;
exit(0);
